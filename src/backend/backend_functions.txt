
class Backend(object):
Attributes:
self.chartObjects = []
self.stopSession = threading.Event()

async def scanForDevices(self):
-Description: Scans for bluetooth devices and serial port devices 
-Parameters: None
-returns: Returns a list of tuples in the form (displayName, MACaddress, rssi) for bluetooth devices and (portName, portDevice) for serial port devices 

async def connectToDevice(self, deviceName, deviceAddress): 
-Description: creates device object and connects to bluetooth device via deviceAddress and receives necessary connection information from the device 
-Parameters: device display name <string> and device MAC address or port name <string>
-Returns: True if a connection was established between the bluetooth device and local machine and false otherwise
    
def listSensorNames()
-Description: gets sensor names from client by invoking 'get_sensor_names()' from device object
-Parameters: None
-Return: a list of strings including the sensor names of the device 

def createChartObject(chartTitle, xlabel, ylabel, sensorNames)
-Description: creates a chart object id, calls chart constructor, appends chart object to chartObject list
-Parameters: chartTitle <string>, xlabel <string>, ylabel <string>, sensorNames <list of strings>
-Return: None

def getChartObjects()
-Description: gets all chart objects
-Parameters: None
-Return: list of type Chart 
 
def getChart(id)
-Description: get a specific chart object by id 
-Parameters: chart id <int> 
-Return: chart object 
    
def getAllChartData(self, id):
-Description: Retrieves all the chart data collected since the beginning of the session
-Parameters: chart id <int>
-Return: returns all chart data as a dictionary where the keys are the sensor names and the values are lists of data values eg. {"sensor1": [val1, val2], "sensor2": [val1, val2]}
    
def getRecentChartData(self, id):
- Description: Retrieves all the chart data collected since the last time getChartData was called for the specified chart
- Parameters: chart id 
- Return: returns recent chart data as a dictionary in the following format {"sensor1": [val1, val2], "sensor2": [val1, val2]}
        
def runInLoop(self, loop): <backend use only>
- Description: sets up getData thread 
- Parameters: asyncio event loop object
- Returns: None  

async def startSession(self):
-Description: creates and starts runSession and getData threads and clears locked objects for shared memory
-Parameters: None
-Return: None 

def runSession(self):
-Description: Parses data in shared memory and stores it in the connected devices data struct. Also updates all chart objects
-Parameters: None
-Return: None               
            
async def endSession(self):
- Description: flags getData and runSession threads to terminate through locked objects, joins threads and clears locked objects
- Parameters: None
- Return: None

def saveData(self, filename, filePath):
-Description: saves data into a csv file in the specified location
-Parameters: filename to save the data to <string>, filePath <string> to save the file to 
-Return: boolean indicating if saving the file was successful 
 
def clearSession(self):
-Description: start a new session by clearing the current data in the chart 
-Parameters: None
-Return: None 
      
async def restartProgram(self):
-Description: clears all charts and disconnects PC from bluetooth device 
-Parameters: None
-Return: None
  
async def scanForBluetoothDevices(self): <backend use only>
-Description: scans for bluetooth devices (helper for scanForDevices)
-Parameters: None
-Return: a list of tuples in the form (displayName, MACaddress, rssi)

def scanForSerialDevices(self): <backend use only>
-Description: scans for serial port devices (helper for scanForDevices)
-Parameters: None
-Return: a list of tuples in the form (portName, portDevice) 


